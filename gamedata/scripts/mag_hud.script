
--[[

	RavenAscendant
	07May2021
	Ready Magazine HUD for Anomaly Magazine rewrite.
--]]

get_mag_property			= magazine_binder.get_mag_property
get_size					= magazine_binder.get_size
is_carried_mag				= magazine_binder.is_carried_mag
print_dbg					= magazine_binder.print_dbg
gc						 	= game.translate_string

-- Update rate
local tg_update_step = 1000 --[ms]


----------------------------------
--	HUD (Indicators)
----------------------------------

HUD = nil

-------
function on_screen_resolution_changed()
	deactivate_hud()
	activate_hud()
end


function activate_hud()
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	RegisterScriptCallback("on_console_execute",on_console_execute)
	RegisterScriptCallback("GUI_on_show",update_hud)
	RegisterScriptCallback("GUI_on_hide",update_hud)
	
	if HUD == nil then
		HUD = UIMagHUD()
		get_hud():AddDialogToRender(HUD)
	end
	HUD:Update(true)
end

function deactivate_hud()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
	
	UnregisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	UnregisterScriptCallback("on_console_execute",on_console_execute)
	UnregisterScriptCallback("GUI_on_show",update_hud)
	UnregisterScriptCallback("GUI_on_hide",update_hud)
end

function update_hud()
	if HUD ~= nil then
		HUD:Update(true)
	end
end

function actor_on_net_destroy()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end

function on_console_execute(name)
	if name == "hud_draw" and HUD then
		HUD:Update(true)
	end
end

-------
class "UIMagHUD" (CUIScriptWnd)

function UIMagHUD:__init() super()
	
	self.mirrored = true
	self.mags = {}
	self.mags.small = {}
	self.mags.medium = {}
	self.mags.large = {}
	
	self.ratio  = utils_xml.screen_ratio()
	self._tmr   = time_global()
	self.offset = 0
	self.w = 1
	self.index = {}
	self.index.small = 0
	self.index.medium = 0
	self.index.large = 0
	

	
	self:InitControls()
end

function UIMagHUD:__finalize()
end
local xml
function UIMagHUD:InitControls()
	xml  = CScriptXmlInit()
	xml:ParseFile("mag_hud.xml")
	
	self.dialog = xml:InitStatic("pouch", self)
	self.pouch = {}
	self.pouch.small = xml:InitStatic("pouch:small", self.dialog)
	self.pouch.small:Show(true)
	self.pouch.medium = xml:InitStatic("pouch:medium", self.dialog)
	self.pouch.medium:Show(true)
	self.pouch.large = xml:InitStatic("pouch:large", self.dialog)
	self.pouch.large:Show(true)
	self.dialog:Show(true)
	

end

function UIMagHUD:Clear()

	for a, b in pairs(self.mags) do
			for k, ele in pairs(b) do
				ele.ico:Show(false)
				ele.bkg:Show(false)
			end
		
	end

	self.index.small = 0
	self.index.medium = 0
	self.index.large = 0

end

function UIMagHUD:Update(force) --Update(true) can be called from weapon reload script to force an immediate update. Will also be called when inventory closes. otherwise a periodic update od once a second happens. that is probably exsesive as long as update is happening on run reload.
	CUIScriptWnd.Update(self)
	
	
	local tg = time_global()
	if force then
		self._tmr = tg - 1
	end
	if self._tmr >= tg then
		return
	else
		self._tmr = tg + tg_update_step
	end

	-- Clear all
	self:Clear()
	
	-- Hide HUD when it's occupied by a GUI class
	if not main_hud_shown() then
		return
	end
	function itr(item)
		id = item:id()
		if is_carried_mag(id) then
			local section = get_mag_property(id, "section")
			local size = get_size(id)
			local axis = utils_xml.get_item_axis(section,1)
			local grid_w = axis.w / axis.h
			local index = self.index[size]
			if self.mirrored then
				index = self.index[size] + (grid_w and math.ceil(grid_w) or 1) -- keep some semblance of standard spacing.
				self.index[size] = index 
			end
			
			if not self.mags[size][index] then
				self.mags[size][index]= {}
				self.mags[size][index].bkg = xml:InitStatic("mag", self.pouch[size])
				self.mags[size][index].ico = xml:InitStatic("mag", self.pouch[size])
				self.mags[size][index].ammo = xml:InitStatic("mini_ico", self.mags[size][index].ico)				
				scale_ui(self.mags[size][index].ico)
				scale_ui(self.mags[size][index].bkg)
				scale_ui(self.mags[size][index].ammo)
				self.w = self.mags[size][index].ico:GetWidth()
				self.ammo_w = self.mags[size][index].ammo:GetWidth()
				 
				self.mags[size][index].ico:SetWndPos( vector2():set( (self.w + self.offset) * index *(self.mirrored and -1 or 1) , 0 ) )
				self.mags[size][index].bkg:SetWndPos( vector2():set( (self.w + self.offset) * index *(self.mirrored and -1 or 1) , 0 ) )
			end
			local h = self.mags[size][index].ico:GetHeight()
			self.mags[size][index].ico:SetWndSize( vector2():set( self.w * (grid_w or 1), h))
			self.mags[size][index].bkg:SetWndSize( vector2():set( self.w * (grid_w and math.ceil(grid_w) or 1), h)) --icon needs to stay square, background needs to stay whole number ratio of h.
			
			local loaded = get_mag_property(id, "loaded")
			local round = stack.peek(loaded)
			local text = round and magazines_mcm.get_config("icon_text")and gc(SYS_GetParam(0, round, "inv_name_short")) or ""
			
			self.mags[size][index].ico:TextControl():SetText(text)
			self.mags[size][index].ammo:Show(false)
			if round then
				local ammo_axis = utils_xml.get_item_axis(round,1)
				local ammo_grid_w = ammo_axis.w / ammo_axis.h
				h = self.mags[size][index].ammo:GetHeight()

				self.mags[size][index].ammo:InitTexture( utils_xml.get_icons_texture(round) )
				self.mags[size][index].ammo:SetTextureRect(Frect():set( utils_xml.get_item_axis(round, nil, true) ))
				self.mags[size][index].ammo:SetWndSize( vector2():set(self.ammo_w * (ammo_grid_w or 1), h))
				self.mags[size][index].ammo:Show(magazines_mcm.get_config("ammo_icon"))
			end
			self.mags[size][index].ico:InitTexture( utils_xml.get_icons_texture(section) )
			self.mags[size][index].ico:SetTextureRect(Frect():set( utils_xml.get_item_axis(section, nil, true) ))
			--self.mags[size][index].bkg:InitTexture( "ui\\ui_actor_hint_wnd.dds" )
			--self.mags[size][index].bkg:SetTextureRect(Frect():set( 228, 540, 265, 590 ))
			self.mags[size][index].bkg:InitTexture( "ui\\ui_ingame2_common.dds" )
			self.mags[size][index].bkg:SetTextureRect(Frect():set( 0, 285, 68, 324 ))
			self.mags[size][index].ico:Show(true)
			self.mags[size][index].bkg:Show(true)
			if not self.mirrored then
				self.index[size] = index  + (grid_w and math.ceil(grid_w) or 1)
			end
		end
	end
	db.actor:inventory_for_each(itr)
	
			
	
	self.dialog:Show(magazines_mcm.get_config("show_hud"))
end


----------------------------------
--	Callbacks
----------------------------------

local function actor_on_first_update()
	
	activate_hud()
end

local function actor_on_update()
	
	HUD:Update()
	
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("on_screen_resolution_changed",on_screen_resolution_changed)
end




function scale_ui(ele, adjust_x, anchor, anchor_point, parent_width)
	p_width = parent_width or 1024
	p_center = p_width/2
	width = ele:GetWidth()
	pos = ele:GetWndPos()
	anchorpos = {}
	anchorpos.left = pos.x
	anchorpos.right = anchorpos.left + width
	anchorpos.center = anchorpos.left + width/2
	ratio = (device().height / device().width) / (768 / 1024)
	xadjust = anchorpos.left
	if adjust_x then
		if anchor_point == "right" then
			xadjust = p_width - (p_width - (anchor and anchorpos[anchor] or anchorpos.left))*ratio
		elseif anchor_point == "center" then
			xadjust = p_center - (p_center - (anchor and anchorpos[anchor] or anchorpos.left))*ratio
		else
			xadjust = ratio * (anchor and anchorpos[anchor] or anchorpos.left)
		end
	end
	ele:SetWndSize(vector2():set(ele:GetWidth() * ratio, ele:GetHeight()))
	ele:SetWndPos( vector2():set(xadjust , pos.y ) )
end
